From: "Matteo F. Vescovi" <mfv@debian.org>
Date: Mon, 31 Oct 2016 22:28:15 +0100
Subject: look_for_dejavu_ttf_with_fontconfig

* Avoid using the droid font shipped with upstream source
  and use fontconfig to get DejaVu instead.
* Remove bad installation of fonts directory into locales.
---
 CMakeLists.txt                                 |  6 ++++
 build_files/cmake/Modules/FindFontconfig.cmake | 48 ++++++++++++++++++++++++++
 build_files/cmake/macros.cmake                 |  6 ++++
 build_files/cmake/platform/platform_unix.cmake |  7 ++++
 source/blender/blenfont/CMakeLists.txt         |  7 ++++
 source/blender/blenfont/intern/blf_font_i18n.c | 46 ++++++++++++++++++++++--
 source/blender/blenlib/BLI_fileops.h           |  1 +
 source/blender/blenlib/intern/fileops.c        | 43 +++++++++++++++++++++++
 source/creator/CMakeLists.txt                  |  6 ----
 9 files changed, 162 insertions(+), 8 deletions(-)
 create mode 100644 build_files/cmake/Modules/FindFontconfig.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index bfea2dd..4ac5eca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -204,6 +204,9 @@ option(WITH_BLENDER "Build blender (disable to build only the blender player)" O
 mark_as_advanced(WITH_BLENDER)
 
 option(WITH_INTERNATIONAL "Enable I18N (International fonts and text)" ON)
+if(UNIX AND NOT APPLE)
+    option(WITH_FONTCONFIG "Enable Fontconfig (discovering fonts installed on Linux)" OFF)
+endif()
 
 option(WITH_PYTHON        "Enable Embedded Python API  (only disable for development)" ON)
 option(WITH_PYTHON_SECURITY "Disables execution of scripts within blend files by default" ON) 
@@ -1762,6 +1765,9 @@ if(FIRST_RUN)
 		info_cfg_option(WITH_GL_ANGLE)
 	endif()
 
+	info_cfg_text("Other:")
+	info_cfg_option(WITH_FONTCONFIG)
+
 	info_cfg_text("")
 
 	message("${_config_msg}")
diff --git a/build_files/cmake/Modules/FindFontconfig.cmake b/build_files/cmake/Modules/FindFontconfig.cmake
new file mode 100644
index 0000000..7dc09f3
--- /dev/null
+++ b/build_files/cmake/Modules/FindFontconfig.cmake
@@ -0,0 +1,48 @@
+# Try to find the Fontconfig
+# Once done this will define
+#
+#  FONTCONFIG_FOUND - system has Fontconfig
+#  FONTCONFIG_INCLUDE_DIR - The include directory to use for the fontconfig headers
+#  FONTCONFIG_LIBRARIES - Link these to use FONTCONFIG
+#  FONTCONFIG_DEFINITIONS - Compiler switches required for using FONTCONFIG
+
+# Copyright (c) 2006,2007 Laurent Montel <montel@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+if (FONTCONFIG_LIBRARIES AND FONTCONFIG_INCLUDE_DIR)
+
+  # in cache already
+  set(FONTCONFIG_FOUND TRUE)
+
+else (FONTCONFIG_LIBRARIES AND FONTCONFIG_INCLUDE_DIR)
+
+  if (NOT WIN32)
+    # use pkg-config to get the directories and then use these values
+    # in the FIND_PATH() and FIND_LIBRARY() calls
+    find_package(PkgConfig)
+    pkg_check_modules(FONTCONFIG fontconfig)
+
+    set(FONTCONFIG_DEFINITIONS ${FONTCONFIG_CFLAGS_OTHER})
+  endif (NOT WIN32)
+
+  find_path(FONTCONFIG_INCLUDE_DIR fontconfig/fontconfig.h
+    PATHS
+    ${FONTCONFIG_INCLUDEDIR}
+    ${FONTCONFIG_INCLUDE_DIRS}
+    /usr/X11/include
+  )
+
+  find_library(FONTCONFIG_LIBRARIES NAMES fontconfig
+    PATHS
+    ${FONTCONFIG_LIBDIR}
+    ${FONTCONFIG_LIBRARY_DIRS}
+  )
+
+  include(FindPackageHandleStandardArgs)
+  FIND_PACKAGE_HANDLE_STANDARD_ARGS(Fontconfig DEFAULT_MSG FONTCONFIG_LIBRARIES FONTCONFIG_INCLUDE_DIR)
+
+  mark_as_advanced(FONTCONFIG_LIBRARIES FONTCONFIG_INCLUDE_DIR)
+
+endif (FONTCONFIG_LIBRARIES AND FONTCONFIG_INCLUDE_DIR)
diff --git a/build_files/cmake/macros.cmake b/build_files/cmake/macros.cmake
index 6303119..4e142ef 100644
--- a/build_files/cmake/macros.cmake
+++ b/build_files/cmake/macros.cmake
@@ -302,6 +302,9 @@ function(SETUP_LIBDIRS)
 	if(WITH_BOOST)
 		link_directories(${BOOST_LIBPATH})
 	endif()
+	if(WITH_FONTCONFIG)
+		link_directories(${FONTCONFIG_LIBPATH})
+	endif()
 	if(WITH_OPENIMAGEIO)
 		link_directories(${OPENIMAGEIO_LIBPATH})
 	endif()
@@ -382,6 +385,9 @@ function(setup_liblinks
 	if(WITH_SYSTEM_GLEW)
 		target_link_libraries(${target} ${BLENDER_GLEW_LIBRARIES})
 	endif()
+	if(WITH_FONTCONFIG)
+		target_link_libraries(${target} ${FONTCONFIG_LIBRARIES})
+	endif()
 	if(WITH_BULLET AND WITH_SYSTEM_BULLET)
 		target_link_libraries(${target} ${BULLET_LIBRARIES})
 	endif()
diff --git a/build_files/cmake/platform/platform_unix.cmake b/build_files/cmake/platform/platform_unix.cmake
index 62e0caa..4e889ea 100644
--- a/build_files/cmake/platform/platform_unix.cmake
+++ b/build_files/cmake/platform/platform_unix.cmake
@@ -132,6 +132,13 @@ if(WITH_JACK)
 	endif()
 endif()
 
+if(WITH_FONTCONFIG)
+	find_package(Fontconfig)
+	if(NOT FONTCONFIG_FOUND)
+		set(WITH_FONTCONFIG OFF)
+	endif()
+endif()
+
 # Codecs
 if(WITH_CODEC_SNDFILE)
 	find_package_wrapper(SndFile)
diff --git a/source/blender/blenfont/CMakeLists.txt b/source/blender/blenfont/CMakeLists.txt
index 36ad6fe..19d2bab 100644
--- a/source/blender/blenfont/CMakeLists.txt
+++ b/source/blender/blenfont/CMakeLists.txt
@@ -64,6 +64,13 @@ if(WITH_INTERNATIONAL)
 	add_definitions(-DWITH_INTERNATIONAL)
 endif()
 
+if(WITH_FONTCONFIG)
+	list(APPEND INC_SYS
+		${FONTCONFIG_INCLUDE_DIRS}
+	)
+	add_definitions(-DWITH_FONTCONFIG)
+endif()
+
 if(WITH_PYTHON)
 	add_definitions(-DWITH_PYTHON)
 	list(APPEND INC
diff --git a/source/blender/blenfont/intern/blf_font_i18n.c b/source/blender/blenfont/intern/blf_font_i18n.c
index b6ff7ed..e343c73 100644
--- a/source/blender/blenfont/intern/blf_font_i18n.c
+++ b/source/blender/blenfont/intern/blf_font_i18n.c
@@ -45,10 +45,14 @@
 #include "BKE_appdir.h"
 
 #ifdef WITH_INTERNATIONAL
+#ifdef WITH_FONTCONFIG
+#include <fontconfig/fontconfig.h>
+#else
 static const char unifont_filename[] = "droidsans.ttf.gz";
+static const char unifont_mono_filename[] = "bmonofont-i18n.ttf.gz";
+#endif
 static unsigned char *unifont_ttf = NULL;
 static int unifont_size = 0;
-static const char unifont_mono_filename[] = "bmonofont-i18n.ttf.gz";
 static unsigned char *unifont_mono_ttf = NULL;
 static int unifont_mono_size = 0;
 #endif  /* WITH_INTERNATIONAL */
@@ -57,6 +61,24 @@ unsigned char *BLF_get_unifont(int *r_unifont_size)
 {
 #ifdef WITH_INTERNATIONAL
 	if (unifont_ttf == NULL) {
+#ifdef WITH_FONTCONFIG
+		FcFontSet *fontset = NULL;
+		FcValue v;
+		FcPattern *pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Dejavu Sans", FC_STYLE, FcTypeString, "Regular", (char *) 0);
+		fontset = FcFontList(0,pattern,0);
+		if (fontset->nfont > 0) {
+			// Get the file of the first font in the fontset that match pattern
+			FcPatternGet(fontset->fonts[0], FC_FILE, 0, &v);
+			// Load the file stored in the union of FcValue into memory
+			unifont_ttf = (unsigned char*)BLI_file_to_mem(
+				(const char *)v.u.s,
+				&unifont_size
+			);
+		}
+		else {
+			printf("%s: 'Dejavu Sans' font not found with fontconfig\n", __func__);
+		}
+#else
 		const char * const fontpath = BKE_appdir_folder_id(BLENDER_DATAFILES, "fonts");
 		if (fontpath) {
 			char unifont_path[1024];
@@ -68,6 +90,7 @@ unsigned char *BLF_get_unifont(int *r_unifont_size)
 		else {
 			printf("%s: 'fonts' data path not found for international font, continuing\n", __func__);
 		}
+#endif
 	}
 
 	*r_unifont_size = unifont_size;
@@ -92,7 +115,25 @@ unsigned char *BLF_get_unifont_mono(int *r_unifont_size)
 {
 #ifdef WITH_INTERNATIONAL
 	if (unifont_mono_ttf == NULL) {
-		const char *fontpath = BKE_appdir_folder_id(BLENDER_DATAFILES, "fonts");
+#ifdef WITH_FONTCONFIG
+		FcFontSet *fontset = NULL;
+		FcValue v;
+		FcPattern *pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Dejavu Sans Mono", FC_STYLE, FcTypeString, "Regular", (char *) 0);
+		fontset = FcFontList(0,pattern,0);
+		if (fontset->nfont > 0) {
+			// Get the file of the first font in the fontset that match pattern
+			FcPatternGet(fontset->fonts[0], FC_FILE, 0, &v);
+			// Load the file stored in the union of FcValue into memory
+			unifont_mono_ttf = (unsigned char*)BLI_file_to_mem(
+				(const char *)v.u.s,
+				&unifont_mono_size
+			);
+		}
+		else {
+			printf("%s: 'Dejavu Sans Mono' font not found with fontconfig\n", __func__);
+		}
+#else
+       	const char *fontpath = BKE_appdir_folder_id(BLENDER_DATAFILES, "fonts");
 		if (fontpath) {
 			char unifont_path[1024];
 
@@ -103,6 +144,7 @@ unsigned char *BLF_get_unifont_mono(int *r_unifont_size)
 		else {
 			printf("%s: 'fonts' data path not found for international monospace font, continuing\n", __func__);
 		}
+#endif
 	}
 
 	*r_unifont_size = unifont_mono_size;
diff --git a/source/blender/blenlib/BLI_fileops.h b/source/blender/blenlib/BLI_fileops.h
index bb23c63..48b47b7 100644
--- a/source/blender/blenlib/BLI_fileops.h
+++ b/source/blender/blenlib/BLI_fileops.h
@@ -89,6 +89,7 @@ bool   BLI_is_file(const char *path) ATTR_WARN_UNUSED_RESULT ATTR_NONNULL();
 bool   BLI_dir_create_recursive(const char *dir) ATTR_NONNULL();
 double BLI_dir_free_space(const char *dir) ATTR_WARN_UNUSED_RESULT ATTR_NONNULL();
 char  *BLI_current_working_dir(char *dir, const size_t maxlen) ATTR_WARN_UNUSED_RESULT ATTR_NONNULL();
+char  *BLI_file_to_mem(const char *from_file, int *size_r) ATTR_NONNULL();
 
 /* Filelist */
 
diff --git a/source/blender/blenlib/intern/fileops.c b/source/blender/blenlib/intern/fileops.c
index 1df7f6f..e6d3b19 100644
--- a/source/blender/blenlib/intern/fileops.c
+++ b/source/blender/blenlib/intern/fileops.c
@@ -156,6 +156,49 @@ char *BLI_file_ungzip_to_mem(const char *from_file, int *r_size)
 	return mem;
 }
 
+/* Read the file in from_file and write it to memory to_mem,
+   at most size bytes. Return the file size.
+*/
+char *BLI_file_to_mem(const char *from_file, int *size_r) {
+
+    FILE * file;
+    int readsize, size, alloc_size = 0;
+    char *mem = NULL;
+    const int chunk_size = 512*1024;
+
+    size= 0;
+
+    file = fopen(from_file, "rb");
+
+    for(;;) {
+        if(mem == NULL) {
+            mem = MEM_callocN(chunk_size, "BLI_file_to_mem");
+            alloc_size = chunk_size;
+        } else {
+            mem = MEM_reallocN(mem, size+chunk_size);
+            alloc_size += chunk_size;
+        }
+
+        readsize = fread(mem+size, 1, chunk_size, file);
+        if(readsize > 0) {
+            size += readsize;
+        }
+        else break;
+    }
+
+    if(size == 0) {
+        MEM_freeN(mem);
+        mem = NULL;
+    }
+    else if(alloc_size != size)
+        mem = MEM_reallocN(mem, size);
+
+    fclose(file);
+    *size_r = size;
+
+    return mem;
+}
+
 /**
  * Returns true if the file with the specified name can be written.
  * This implementation uses access(2), which makes the check according
diff --git a/source/creator/CMakeLists.txt b/source/creator/CMakeLists.txt
index 76da65d..1073b76 100644
--- a/source/creator/CMakeLists.txt
+++ b/source/creator/CMakeLists.txt
@@ -358,12 +358,6 @@ endif()
 
 # localization
 if(WITH_INTERNATIONAL)
-	install(
-		DIRECTORY
-			${CMAKE_SOURCE_DIR}/release/datafiles/fonts
-		DESTINATION ${CMAKE_INSTALL_PREFIX}/share/locale
-	)
-
 	set(_locale_dir "${CMAKE_SOURCE_DIR}/release/datafiles/locale")
 	set(_locale_target_dir ${CMAKE_INSTALL_PREFIX}/share/locale)
 
